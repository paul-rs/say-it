AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Serverless app to convert text to speech.

Parameters:
  TableName:
    Type: String
    Default: say-it-messages
  BucketName:
    Type: String
    Default: say-it-messages
  SnsTopicName:
    Type: String
    Default: say-it-messages

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 3
    Environment:
      Variables:
        TABLE_NAME: !Ref TableName
        BUCKET_NAME: !Ref BucketName
        SNS_TOPIC: !Ref SnsTopicName

Resources:

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: lambda-execution
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal: {Service: [lambda.amazonaws.com]}
          Action: ['sts:AssumeRole']
      ManagedPolicyArns:
      - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      Policies:
      - PolicyName: CloudwatchPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - 'logs:CreateLogGroup'
              Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*'
      - PolicyName: S3Policy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - 's3:PutObject'
                - 's3:DeleteObject'
                - 's3:GetObject'
              Resource:
                - !Sub 'arn:aws:s3:::${BucketName}/*'
      - PolicyName: DynamoDBPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - 'dynamodb:Query'
                - 'dynamodb:PutItem'
                - 'dynamodb:UpdateItem'
                - 'dynamodb:Scan'
              Resource:
                - !GetAtt MessagesTable.Arn
      - PolicyName: SNSPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - 'sns:Publish'
              Resource:
                - !Ref MessagesTopic

  MessagesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Ref TableName
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
  
  MessagesBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Ref BucketName
  
  MessagesTopic:
    Type: 'AWS::SNS::Topic'
    Properties:
      TopicName: !Ref SnsTopicName
      # Subscription:
      #   - Protocol: lambda
      #     Endpoint: !GetAtt TranscodeAudioFunction.Arn
      

  NewPostFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: app/
      FunctionName: say-it-new-post
      Handler: new_post.handler
      Runtime: python3.6
      Role: !GetAtt LambdaExecutionRole.Arn
      Events:
        NewPost:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
              Path: /new_post
              Method: post

Outputs:

    NewPostApi:
      Description: 'New Post API'
      Value: !Sub 'https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/hello/'

    NewPostFunction:
      Description: 'NewPost Lambda Function ARN'
      Value: !GetAtt NewPostFunction.Arn
